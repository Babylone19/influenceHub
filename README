# InfluenceHub - Plateforme de gestion d'influenceurs

> Application web full-stack pour gérer des profils d'influenceurs avec authentification sécurisée, opérations CRUD et filtrage dynamique.

## Technologies utilisées

| Backend | Frontend | Outils |
|---------|----------|---------|
| Express.js | React + Vite | Docker |
| Prisma ORM | Material UI | JWT Auth |
| MongoDB | JavaScript | npm/yarn |

## Fonctionnalités

- **Authentification sécurisée** : Inscription et connexion avec JWT
- **Gestion des influenceurs** : CRUD complet (Créer, Lire, Modifier, Supprimer)
- **Filtrage dynamique** : Recherche par pays et catégorie
- **Interface moderne** : Design responsive avec Material UI + mode sombre
- **Performance** : Frontend optimisé avec Vite

## Prérequis

Avant de commencer, assurez-vous d'avoir installé :

- [Node.js](https://nodejs.org/) (v18 ou supérieur)
- [Docker](https://www.docker.com/) et Docker Compose
- npm ou yarn
- Un terminal (bash, zsh, PowerShell, etc.)

## Démarrage rapide

### 1. Clonage du projet
```bash
git clone https://github.com/tonusername/influencehub.git
cd influencehub
```

### 2. Démarrage de MongoDB
```bash
docker run --name mongodb_influencehub -p 27017:27017 -d mongo:latest
```

### 3. Configuration du Backend
```bash
cd backend
npm install
npx prisma generate
npm run dev
```
**Backend disponible sur** : http://localhost:5000

### 4. Configuration du Frontend
```bash
cd ../frontend
npm install
npm run dev
```
**Frontend disponible sur** : http://localhost:5173

## Architecture du projet

```
influencehub/
├── backend/                   # Serveur Express
│   ├── src/
│   │   ├── config/           # Configuration DB
│   │   ├── controllers/      # Logique métier
│   │   ├── middlewares/      # Auth & gestion erreurs
│   │   ├── routes/           # Routes API
│   │   ├── services/         # Services métier
│   │   └── app.js            # Point d'entrée
│   ├── prisma/
│   │   └── schema.prisma     # Schéma DB
│   ├── .env                  # Variables d'environnement
│   └── package.json          # Dépendances
├── frontend/                 # App React
│   ├── public/              # Assets statiques
│   ├── src/
│   │   ├── components/      # Composants réutilisables
│   │   ├── contexts/        # Gestion d'état
│   │   ├── hooks/           # Hooks personnalisés
│   │   ├── pages/           # Pages application
│   │   ├── routes/          # Routing frontend
│   │   ├── services/        # Appels API
│   │   ├── theme.js         # Config Material UI
│   │   ├── App.jsx          # Composant principal
│   │   └── main.jsx         # Point d'entrée
│   └── package.json         # Dépendances
└── README.md
```

## Configuration

### Variables d'environnement

Créer un fichier `.env` dans le dossier `backend/` :

```bash
DATABASE_URL="mongodb://localhost:27017/influenceHub"
PORT=5000
JWT_SECRET="supersecret123"
```

> **Important** : Changez `JWT_SECRET` en production !

## API Endpoints

Base URL : `http://localhost:5000`

### Authentification

#### Inscription
```bash
POST /api/auth/inscription
```

**Body :**
```json
{
  "email": "test@example.com",
  "motDePasse": "password123",
  "nom": "Test User"
}
```

#### Connexion
```bash
POST /api/auth/connexion
```

**Body :**
```json
{
  "email": "test@example.com",
  "motDePasse": "password123"
}
```

### Influenceurs

#### Lister tous les influenceurs
```bash
GET /api/influenceurs
```

#### Filtrer par critères
```bash
GET /api/influenceurs?categorie=Gaming&pays=Canada
```

#### Créer un influenceur
```bash
POST /api/influenceurs
Authorization: Bearer <TOKEN>
```

**Body :**
```json
{
  "nom": "Nouvel Influenceur",
  "reseau": "TikTok",
  "followers": 50000,
  "pays": "Canada",
  "categorie": "Gaming"
}
```

#### Mettre à jour
```bash
PUT /api/influenceurs/:id
Authorization: Bearer <TOKEN>
```

#### Supprimer
```bash
DELETE /api/influenceurs/:id
Authorization: Bearer <TOKEN>
```

## Fonctionnalités MVP

- Authentification sécurisée avec JWT
- Gestion complète des influenceurs (CRUD)
- Filtres dynamiques par pays et catégorie
- Interface utilisateur moderne avec Material UI
- Mode sombre intégré
- Gestion des erreurs (tokens expirés, validation)
- Dockerisation MongoDB

## Roadmap - Évolutions futures

- Tableau de bord avec graphiques et statistiques
- Exportation des données (CSV/PDF)
- Upload d'avatars via Cloudinary
- Gestion des rôles (admin, lecteur)
- Internationalisation (i18n)
- Recherche avancée avec filtres multiples
- Application mobile React Native

## Scripts disponibles

### Backend
```bash
cd backend
npm install          # Installer dépendances
npm run dev         # Mode développement
npx prisma generate # Générer client Prisma
npx prisma studio   # Interface graphique DB
```

### Frontend
```bash
cd frontend
npm install     # Installer dépendances
npm run dev     # Mode développement
npm run build   # Build production
npm run preview # Prévisualiser build
```

## Maintenance

### Nettoyage MongoDB
```bash
# Arrêter et supprimer le conteneur
docker stop mongodb_influencehub
docker rm mongodb_influencehub

# Redémarrer proprement
docker run --name mongodb_influencehub -p 27017:27017 -d mongo:latest
```

### Réinstaller les dépendances
```bash
# Backend
cd backend && rm -rf node_modules && npm install

# Frontend  
cd frontend && rm -rf node_modules && npm install
```

## Dépannage

### Problèmes courants

| Problème | Solution |
|----------|----------|
| **Port occupé** | `lsof -i :5000 -i :5173` puis tuer les processus |
| **Module manquant** | Supprimer `node_modules` et `npm install` |
| **DB corrompue** | Supprimer et recréer le conteneur MongoDB |
| **Token expiré** | Se reconnecter via l'interface |

### Vérification des services
```bash
# Vérifier que tout fonctionne
curl http://localhost:5000/api/influenceurs
curl http://localhost:5173
```

## Contribution

1. Fork le projet
2. Créer une branche (`git checkout -b feature/amazing-feature`)
3. Commit les changements (`git commit -m 'Add amazing feature'`)
4. Push la branche (`git push origin feature/amazing-feature`)
5. Ouvrir une Pull Request

## Licence

Ce projet est sous licence MIT. Voir le fichier `LICENSE` pour plus de détails.

## Auteurs

- **Ton Username** - *Développeur principal* - [@tonusername](https://github.com/tonusername)

## Remerciements

- [Material UI](https://mui.com/) pour les composants React
- [Prisma](https://www.prisma.io/) pour l'ORM
- [Express.js](https://expressjs.com/) pour le framework backend
- [Vite](https://vitejs.dev/) pour l'outillage frontend

---

<div align="center">

**N'hésitez pas à étoiler ce projet si vous le trouvez utile !**

*Développé avec passion pour la gestion d'influenceurs digitaux*

</div>
