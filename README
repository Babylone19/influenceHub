```markdown
# InfluenceHub - Plateforme de gestion d'influenceurs

Application web full-stack pour gérer des profils d'influenceurs avec authentification sécurisée, opérations CRUD et filtrage dynamique.

## Technologies utilisées

**Backend:** Express, Prisma, MongoDB  
**Frontend:** React, Vite, Material UI  
**Outils:** Docker, JWT pour authentification

## Description

InfluenceHub permet de gérer une base d'influenceurs avec les fonctionnalités suivantes :

- Authentification sécurisée : Inscription et connexion avec JWT
- Gestion des influenceurs : Création, lecture, mise à jour et suppression (CRUD)
- Filtrage dynamique : Recherche par pays et catégorie
- Interface utilisateur : Design moderne, responsive avec Material UI (inclut le mode sombre)

## Prérequis

- Node.js (v18 ou supérieur)
- Docker et Docker Compose
- npm ou yarn
- Terminal (bash, zsh, PowerShell, etc.)

## Démarrage rapide

```bash
# 1. Cloner le projet
git clone https://github.com/tonusername/influencehub.git
cd influencehub

# 2. Lancer MongoDB avec Docker
docker run --name mongodb_influencehub -p 27017:27017 -d mongo:latest

# 3. Installer et lancer le backend
cd backend
npm install
npx prisma generate
npm run dev
# Backend disponible sur http://localhost:5000

# 4. Installer et lancer le frontend
cd ../frontend
npm install
npm run dev
# Frontend disponible sur http://localhost:5173
```

## Architecture

```
influencehub/
├── backend/                    # Serveur Express
│   ├── src/                   # Code source backend
│   │   ├── config/            # Configuration (base de données, etc.)
│   │   ├── controllers/       # Logique métier des endpoints
│   │   ├── middlewares/       # Gestion des authentifications et erreurs
│   │   ├── routes/            # Définition des routes API
│   │   ├── services/          # Services pour la logique métier
│   │   └── app.js             # Point d'entrée du serveur
│   ├── prisma/                # Configuration Prisma
│   │   └── schema.prisma      # Schéma de la base de données
│   ├── .env                   # Variables d'environnement
│   └── package.json           # Dépendances backend
├── frontend/                   # Application React
│   ├── public/                # Ressources statiques
│   ├── src/                   # Code source frontend
│   │   ├── assets/            # Images et autres ressources
│   │   ├── components/        # Composants React réutilisables
│   │   ├── contexts/          # Contextes pour la gestion d'état
│   │   ├── hooks/             # Hooks personnalisés
│   │   ├── pages/             # Pages de l'application
│   │   ├── routes/            # Routes frontend
│   │   ├── services/          # Appels API
│   │   ├── theme.js           # Configuration Material UI
│   │   ├── App.jsx            # Composant principal
│   │   └── main.jsx           # Point d'entrée React
│   └── package.json           # Dépendances frontend
└── README.md
```

## Fonctionnalités

### Authentification
- Inscription avec email, mot de passe et nom
- Connexion avec génération de token JWT
- Gestion des sessions et déconnexion

### Gestion des influenceurs
- Création, lecture, mise à jour et suppression (CRUD)
- Filtrage par pays et catégorie
- Accès public ou sécurisé par JWT selon les endpoints

### Interface utilisateur
- Frontend React avec Vite pour des performances optimales
- Design responsive avec Material UI (inclut le mode sombre)
- Gestion des erreurs et notifications utilisateur

## Installation et configuration

### Configuration du backend

Créer un fichier `.env` dans le dossier `backend/` avec le contenu suivant :

```
DATABASE_URL="mongodb://localhost:27017/influenceHub"
PORT=5000
JWT_SECRET="supersecret123"
```

### Vérification du démarrage

Une fois les services démarrés, vous devriez pouvoir accéder à :

- Backend: http://localhost:5000
- Frontend: http://localhost:5173

## Endpoints API

Tous les endpoints sont accessibles via `http://localhost:5000`.

### Authentification

#### Inscription
```
curl -X POST http://localhost:5000/api/auth/inscription \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@example.com",
    "motDePasse": "password123",
    "nom": "Test User"
  }'
```

#### Connexion
```
curl -X POST http://localhost:5000/api/auth/connexion \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@example.com",
    "motDePasse": "password123"
  }'
```

### Influenceurs

#### Lister tous les influenceurs
```
curl -X GET http://localhost:5000/api/influenceurs
```

#### Filtrer par pays et catégorie
```
curl -X GET "http://localhost:5000/api/influenceurs?categorie=Gaming&pays=Canada"
```

#### Créer un influenceur
```
curl -X POST http://localhost:5000/api/influenceurs \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer TON_TOKEN_ICI" \
  -d '{
    "nom": "Nouvel Influenceur",
    "reseau": "TikTok",
    "followers": 50000,
    "pays": "Canada",
    "categorie": "Gaming"
  }'
```

#### Mettre à jour un influenceur
```
curl -X PUT http://localhost:5000/api/influenceurs/ID \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer TON_TOKEN_ICI" \
  -d '{"followers": 60000}'
```

#### Supprimer un influenceur
```
curl -X DELETE http://localhost:5000/api/influenceurs/ID \
  -H "Authorization: Bearer TON_TOKEN_ICI"
```

## Fonctionnalités MVP

- Authentification sécurisée avec JWT
- Gestion complète des influenceurs (CRUD)
- Filtres dynamiques par pays et catégorie
- Interface utilisateur moderne avec Material UI (mode sombre inclus)
- Gestion des erreurs (tokens expirés, validation des champs)
- Dockerisation de MongoDB pour un déploiement simplifié

## Évolutions futures

- Tableau de bord avec graphiques et statistiques
- Exportation des données en CSV ou PDF
- Upload d'avatars via Cloudinary
- Gestion des rôles (administrateur, lecteur)
- Support de l'internationalisation (i18n)

## Nettoyage et réinitialisation

### Arrêter et supprimer MongoDB
```
docker stop mongodb_influencehub
docker rm mongodb_influencehub
```

### Réinitialiser la base de données
```
docker run --name mongodb_influencehub -p 27017:27017 -d mongo:latest
```

## Dépannage

### Problèmes courants

**Les services ne démarrent pas :**
```
# Vérifier que les ports ne sont pas occupés
lsof -i :5000 -i :5173
```

**Erreur "Cannot find module" :**
```
# Réinstaller les dépendances
cd backend && rm -rf node_modules && npm install
cd ../frontend && rm -rf node_modules && npm install
```

**Base de données corrompue :**
```
# Supprimer et relancer le conteneur MongoDB
docker stop mongodb_influencehub
docker rm mongodb_influencehub
docker run --name mongodb_influencehub -p 27017:27017 -d mongo:latest
```

## Scripts disponibles

### Backend
```
cd backend
npm install       # Installer les dépendances
npm run dev       # Démarrer en mode développement
npx prisma generate  # Générer le client Prisma
```

### Frontend
```
cd frontend
npm install       # Installer les dépendances
npm run dev       # Démarrer en mode développement
```

---

**Développé pour la gestion d'influenceurs digitaux**
```
