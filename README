
---

# InfluenceHub — Plateforme de gestion d’influenceurs

**Backend :** Express + Prisma + MongoDB
**Frontend :** React + Vite + Material UI

---

## Aperçu

**InfluenceHub** est une application web full-stack permettant de :

* Authentification (inscription / connexion avec JWT)
* CRUD complet des profils d’influenceurs
* Filtres dynamiques par pays et catégorie
* Interface moderne, responsive et intuitive

---

## Stack Technique

| Partie             | Technologies                                                 |
| ------------------ | ------------------------------------------------------------ |
| **Backend**        | Node.js, Express.js, Prisma ORM, MongoDB, JWT                |
| **Frontend**       | React (Vite), Material UI v5, React Router, Axios, Notistack |
| **Infrastructure** | Docker (MongoDB), .env, NPM/Yarn                             |
| **Déploiement**    | Local (MVP)                                                  |

---

## Prérequis

* Node.js v18+
* Docker & Docker Compose
* npm ou yarn
* Un terminal (bash, zsh, PowerShell, etc.)

---

## Installation & Lancement

### 1. Cloner le dépôt

```bash
git clone https://github.com/tonusername/influencehub.git
cd influencehub
```

### 2. Lancer la base de données MongoDB avec Docker

À la racine du projet :

```bash
docker run --name mongodb_influencehub -p 27017:27017 -d mongo:latest
```

MongoDB sera accessible sur :

```
mongodb://localhost:27017
```

### 3. Configurer le Backend

```bash
cd backend
npm install
```

Créer un fichier `.env` à la racine de `backend/` :

```env
DATABASE_URL="mongodb://localhost:27017/influenceHub"
PORT=5000
JWT_SECRET="supersecret123"
```

Générer le client Prisma :

```bash
npx prisma generate
```

Lancer le serveur backend :

```bash
npm run dev
```

Serveur disponible sur :

```
http://localhost:5000
```

### 4. Lancer le Frontend

```bash
cd ../frontend
npm install
npm run dev
```

Frontend disponible sur :

```
http://localhost:5173
```

---

## Tests API (cURL)

### 1. Inscription

```bash
curl -X POST http://localhost:5000/api/auth/inscription \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@example.com",
    "motDePasse": "password123",
    "nom": "Test User"
  }'
```

### 2. Connexion (obtenir un token JWT)

```bash
curl -X POST http://localhost:5000/api/auth/connexion \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@example.com",
    "motDePasse": "password123"
  }'
```

### 3. Lister les influenceurs (public)

```bash
curl -X GET http://localhost:5000/api/influenceurs
```

### 4. Filtrer les influenceurs

```bash
curl -X GET "http://localhost:5000/api/influenceurs?categorie=Humour&pays=Italie"
```

### 5. Créer un influenceur (protégé — nécessite un token)

```bash
curl -X POST http://localhost:5000/api/influenceurs \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer TON_TOKEN_ICI" \
  -d '{
    "nom": "Nouvel Influenceur",
    "reseau": "TikTok",
    "followers": 50000,
    "pays": "Canada",
    "categorie": "Gaming"
  }'
```

### 6. Mettre à jour un influenceur

```bash
curl -X PUT http://localhost:5000/api/influenceurs/ID_DE_L_INFLUENCEUR \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer TON_TOKEN_ICI" \
  -d '{"followers": 60000}'
```

### 7. Supprimer un influenceur

```bash
curl -X DELETE http://localhost:5000/api/influenceurs/ID_DE_L_INFLUENCEUR \
  -H "Authorization: Bearer TON_TOKEN_ICI"
```

---

## Tests Frontend

1. Ouvrir le navigateur : [http://localhost:5173](http://localhost:5173)
2. S’inscrire via **Commencer gratuitement**
3. Se connecter
4. Explorer la liste des influenceurs
5. Créer, modifier ou supprimer un influenceur

---

## Nettoyage & Réinitialisation

### Supprimer le conteneur MongoDB

```bash
docker stop mongodb_influencehub
docker rm mongodb_influencehub
```

### Réinitialiser la base

1. Supprimer le conteneur ci-dessus
2. Relancer MongoDB → une base vide sera créée
3. (Optionnel) Utiliser `mongosh` pour gérer les documents

---

## Structure du Projet

```
influencehub/
├── backend/
│   ├── src/
│   │   ├── config/
│   │   ├── controllers/
│   │   ├── middlewares/
│   │   ├── routes/
│   │   ├── services/
│   │   └── app.js
│   ├── prisma/
│   │   └── schema.prisma
│   ├── .env
│   └── package.json
├── frontend/
│   ├── public/
│   ├── src/
│   │   ├── assets/
│   │   ├── components/
│   │   ├── contexts/
│   │   ├── hooks/
│   │   ├── pages/
│   │   ├── routes/
│   │   ├── services/
│   │   ├── theme.js
│   │   ├── App.jsx
│   │   └── main.jsx
│   └── package.json
└── README.md
```

---

## Fonctionnalités MVP

* Authentification JWT (inscription, connexion, déconnexion)
* CRUD complet des influenceurs
* Filtres dynamiques (pays, catégorie)
* UI moderne et responsive (Material UI, mode sombre)
* Gestion des erreurs (tokens expirés, champs manquants)
* Dockerisé (MongoDB)

---

## Évolutions Futures

* Tableau de bord analytics (graphiques, stats)
* Export CSV/PDF
* Upload d’avatar (Cloudinary)
* Gestion des rôles (admin / lecteur)
* Internationalisation (i18n)

---

